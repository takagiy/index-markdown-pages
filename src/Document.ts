import { readFile, writeFile } from "node:fs/promises";

export class Document {
  protected constructor(
    public readonly path: string,
    protected content: string,
  ) {}

  static async open(path: string) {
    const content = await readFile(path, "utf-8");
    return new Document(path, content);
  }

  static escape(text: string): string {
    return text
      .replaceAll("\\", "\\\\")
      .replaceAll("`", "\\`")
      .replaceAll("*", "\\*")
      .replaceAll("_", "\\_")
      .replaceAll("{", "\\{")
      .replaceAll("}", "\\}")
      .replaceAll("[", "\\[")
      .replaceAll("]", "\\]")
      .replaceAll("<", "\\<")
      .replaceAll(">", "\\>")
      .replaceAll("(", "\\(")
      .replaceAll(")", "\\)")
      .replaceAll("#", "\\#")
      .replaceAll("+", "\\+")
      .replaceAll("-", "\\-")
      .replaceAll(".", "\\.")
      .replaceAll("!", "\\!")
      .replaceAll("|", "\\|");
  }

  async save() {
    writeFile(this.path, this.content, "utf-8");
  }

  title(): string | null {
    const titleMatch = this.content.match(/^# (.*)$/m);
    if (!titleMatch?.[1]) {
      return null;
    }
    return titleMatch[1];
  }

  replaceOrAppend(appendContent: string) {
    const MARKER_BEGIN =
      "<!-- BEGIN generated by takagiy/index-markdown-pages -->";
    const MARKER_END = "<!-- END generated by takagiy/index-markdown-pages -->";

    const append = appendContent.endsWith("\n")
      ? appendContent
      : `${appendContent}\n`;

    const doesMatch = this.content.match(
      new RegExp(`${MARKER_BEGIN}.*${MARKER_END}`, "s"),
    );

    if (doesMatch) {
      this.content = this.content.replace(
        new RegExp(`${MARKER_BEGIN}.*${MARKER_END}`, "s"),
        `${MARKER_BEGIN}\n${append}${MARKER_END}`,
      );
    } else if (this.content.endsWith("\n")) {
      this.content += `\n${MARKER_BEGIN}\n${append}${MARKER_END}`;
    } else {
      this.content += `\n\n${MARKER_BEGIN}\n${append}${MARKER_END}`;
    }
  }
}
